version: "3.9"

services:
  # ──────────────── Zookeeper ────────────────
  zookeeper:
    image: zookeeper:3.7
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      # ZOO_SERVERS: server.1=zookeeper:2888:3888 server.2=zookeeper2:2888:3888 server.3=zookeeper3:2888:3888
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog
    networks:
      - DataLake

  # ──────────────── Kafka brokers ────────────────
  kafka1:
    image: confluentinc/cp-kafka:7.0.0
    hostname: kafka1
    ports:
      - "9091:9091"
      - "9991:9991"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:19091,PLAINTEXT_HOST://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:19091
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9991
      # KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}   # additional
      # KAFKA_LOG_RETENTION_MS: 604800000            # 7 days
      # KAFKA_LOG_RETENTION_BYTES: 1073741824        # 1 GB
      # KAFKA_LOG_SEGMENT_BYTES: 1073741824          # 1 GB
      # KAFKA_LOG_CLEANUP_POLICY: compact
    volumes:
      - ./data/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - DataLake

  kafka2:
    image: confluentinc/cp-kafka:7.0.0
    hostname: kafka2
    ports:
      - "9092:9092"
      - "9992:9992"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka2:19092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_JMX_PORT: 9992
      # KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}
      # KAFKA_LOG_RETENTION_MS: 604800000
      # KAFKA_LOG_RETENTION_BYTES: 1073741824
      # KAFKA_LOG_SEGMENT_BYTES: 1073741824
      # KAFKA_LOG_CLEANUP_POLICY: compact
    volumes:
      - ./data/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - DataLake

  kafka3:
    image: confluentinc/cp-kafka:7.0.0
    hostname: kafka3
    ports:
      - "9093:9093"
      - "9993:9993"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:19093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka3:19093
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9993
      # KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}
      # KAFKA_LOG_RETENTION_MS: 604800000
      # KAFKA_LOG_RETENTION_BYTES: 1073741824
      # KAFKA_LOG_SEGMENT_BYTES: 1073741824
      # KAFKA_LOG_CLEANUP_POLICY: compact
    volumes:
      - ./data/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - DataLake

  # ──────────────── (Optional) JMX Exporters ────────────────
  # jmx-exporter1:
  #   image: "sscaling/jmx-prometheus-exporter"
  #   ports:
  #     - 5556:5556
  #   environment:
  #     CONFIG_YML: "/etc/jmx_exporter/config.yml"
  #     JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
  #   volumes:
  #     - ./etc/jmx_exporter/config_kafka1.yml:/etc/jmx_exporter/config.yml
  #   depends_on:
  #     - kafka1
  #   networks:
  #     - DataLake
  #
  # jmx-exporter2:
  #   image: "sscaling/jmx-prometheus-exporter"
  #   ports:
  #     - 5557:5556
  #   environment:
  #     CONFIG_YML: "/etc/jmx_exporter/config.yml"
  #     JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
  #   volumes:
  #     - ./etc/jmx_exporter/config_kafka2.yml:/etc/jmx_exporter/config.yml
  #   depends_on:
  #     - kafka2
  #   networks:
  #     - DataLake
  #
  # jmx-exporter3:
  #   image: "sscaling/jmx-prometheus-exporter"
  #   ports:
  #     - 5558:5556
  #   environment:
  #     CONFIG_YML: "/etc/jmx_exporter/config.yml"
  #     JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
  #   volumes:
  #     - ./etc/jmx_exporter/config_kafka3.yml:/etc/jmx_exporter/config.yml
  #   depends_on:
  #     - kafka3
  #   networks:
  #     - DataLake

  # ──────────────── Kafka UI ────────────────
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9003:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka1:19091"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - DataLake

  # ──────────────── (Optional) Grafana & Prometheus ────────────────
  # grafana:
  #   image: grafana/grafana
  #   environment:
  #     GF_PATHS_DATA: /var/lib/grafana
  #     GF_SECURITY_ADMIN_USER: admin
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./grafana:/var/lib/grafana
  #     - ./grafana_provisioning:/etc/grafana/provisioning
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - DataLake
  #
  # prometheus:
  #   image: prom/prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   depends_on:
  #     - kafka1
  #     - kafka2
  #     - kafka3
  #   networks:
  #     - DataLake

  # ──────────────── MySQL Master/Slave ────────────────
  mysql-master:
    image: mysql:8.0
    container_name: mysql-master
    hostname: mysql-master
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "root"
    command: >
      mysqld
        --server-id=1
        --log-bin=mysql-bin
        --binlog-format=ROW
    volumes:
      - ./master/data:/var/lib/mysql
      - ./master/initdb:/docker-entrypoint-initdb.d
      - ./master/conf.d:/etc/mysql/conf.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - DataLake

  mysql-slave:
    image: mysql:8.0
    container_name: mysql-slave
    hostname: mysql-slave
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "root"
    command: >
      mysqld
        --server-id=2
        --log-bin=mysql-bin
        --binlog-format=ROW
        --relay-log=relay-bin
    depends_on:
      - mysql-master
    volumes:
      - ./slave/data:/var/lib/mysql
      - ./slave/initdb:/docker-entrypoint-initdb.d
      - ./slave/conf.d:/etc/mysql/conf.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - DataLake

networks:
  DataLake:
    name: DataLake   
    driver: bridge
